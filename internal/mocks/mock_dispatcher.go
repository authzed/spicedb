// Code generated by MockGen. DO NOT EDIT.
// Source: dispatch.go
//
// Generated by this command:
//
//	mockgen -source dispatch.go -destination ../mocks/mock_dispatcher.go -package mocks Dispatcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dispatch "github.com/authzed/spicedb/internal/dispatch"
	dispatchv1 "github.com/authzed/spicedb/pkg/proto/dispatch/v1"
	zerolog "github.com/rs/zerolog"
	gomock "go.uber.org/mock/gomock"
)

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
	isgomock struct{}
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDispatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDispatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDispatcher)(nil).Close))
}

// DispatchCheck mocks base method.
func (m *MockDispatcher) DispatchCheck(ctx context.Context, req *dispatchv1.DispatchCheckRequest) (*dispatchv1.DispatchCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchCheck", ctx, req)
	ret0, _ := ret[0].(*dispatchv1.DispatchCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchCheck indicates an expected call of DispatchCheck.
func (mr *MockDispatcherMockRecorder) DispatchCheck(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchCheck", reflect.TypeOf((*MockDispatcher)(nil).DispatchCheck), ctx, req)
}

// DispatchExpand mocks base method.
func (m *MockDispatcher) DispatchExpand(ctx context.Context, req *dispatchv1.DispatchExpandRequest) (*dispatchv1.DispatchExpandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchExpand", ctx, req)
	ret0, _ := ret[0].(*dispatchv1.DispatchExpandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchExpand indicates an expected call of DispatchExpand.
func (mr *MockDispatcherMockRecorder) DispatchExpand(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchExpand", reflect.TypeOf((*MockDispatcher)(nil).DispatchExpand), ctx, req)
}

// DispatchLookupResources2 mocks base method.
func (m *MockDispatcher) DispatchLookupResources2(req *dispatchv1.DispatchLookupResources2Request, stream dispatch.LookupResources2Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupResources2", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupResources2 indicates an expected call of DispatchLookupResources2.
func (mr *MockDispatcherMockRecorder) DispatchLookupResources2(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupResources2", reflect.TypeOf((*MockDispatcher)(nil).DispatchLookupResources2), req, stream)
}

// DispatchLookupResources3 mocks base method.
func (m *MockDispatcher) DispatchLookupResources3(req *dispatchv1.DispatchLookupResources3Request, stream dispatch.LookupResources3Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupResources3", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupResources3 indicates an expected call of DispatchLookupResources3.
func (mr *MockDispatcherMockRecorder) DispatchLookupResources3(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupResources3", reflect.TypeOf((*MockDispatcher)(nil).DispatchLookupResources3), req, stream)
}

// DispatchLookupSubjects mocks base method.
func (m *MockDispatcher) DispatchLookupSubjects(req *dispatchv1.DispatchLookupSubjectsRequest, stream dispatch.LookupSubjectsStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupSubjects", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupSubjects indicates an expected call of DispatchLookupSubjects.
func (mr *MockDispatcherMockRecorder) DispatchLookupSubjects(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupSubjects", reflect.TypeOf((*MockDispatcher)(nil).DispatchLookupSubjects), req, stream)
}

// ReadyState mocks base method.
func (m *MockDispatcher) ReadyState() dispatch.ReadyState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState")
	ret0, _ := ret[0].(dispatch.ReadyState)
	return ret0
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockDispatcherMockRecorder) ReadyState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockDispatcher)(nil).ReadyState))
}

// MockCheck is a mock of Check interface.
type MockCheck struct {
	ctrl     *gomock.Controller
	recorder *MockCheckMockRecorder
	isgomock struct{}
}

// MockCheckMockRecorder is the mock recorder for MockCheck.
type MockCheckMockRecorder struct {
	mock *MockCheck
}

// NewMockCheck creates a new mock instance.
func NewMockCheck(ctrl *gomock.Controller) *MockCheck {
	mock := &MockCheck{ctrl: ctrl}
	mock.recorder = &MockCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheck) EXPECT() *MockCheckMockRecorder {
	return m.recorder
}

// DispatchCheck mocks base method.
func (m *MockCheck) DispatchCheck(ctx context.Context, req *dispatchv1.DispatchCheckRequest) (*dispatchv1.DispatchCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchCheck", ctx, req)
	ret0, _ := ret[0].(*dispatchv1.DispatchCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchCheck indicates an expected call of DispatchCheck.
func (mr *MockCheckMockRecorder) DispatchCheck(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchCheck", reflect.TypeOf((*MockCheck)(nil).DispatchCheck), ctx, req)
}

// MockExpand is a mock of Expand interface.
type MockExpand struct {
	ctrl     *gomock.Controller
	recorder *MockExpandMockRecorder
	isgomock struct{}
}

// MockExpandMockRecorder is the mock recorder for MockExpand.
type MockExpandMockRecorder struct {
	mock *MockExpand
}

// NewMockExpand creates a new mock instance.
func NewMockExpand(ctrl *gomock.Controller) *MockExpand {
	mock := &MockExpand{ctrl: ctrl}
	mock.recorder = &MockExpandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpand) EXPECT() *MockExpandMockRecorder {
	return m.recorder
}

// DispatchExpand mocks base method.
func (m *MockExpand) DispatchExpand(ctx context.Context, req *dispatchv1.DispatchExpandRequest) (*dispatchv1.DispatchExpandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchExpand", ctx, req)
	ret0, _ := ret[0].(*dispatchv1.DispatchExpandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispatchExpand indicates an expected call of DispatchExpand.
func (mr *MockExpandMockRecorder) DispatchExpand(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchExpand", reflect.TypeOf((*MockExpand)(nil).DispatchExpand), ctx, req)
}

// MockLookupResources2 is a mock of LookupResources2 interface.
type MockLookupResources2 struct {
	ctrl     *gomock.Controller
	recorder *MockLookupResources2MockRecorder
	isgomock struct{}
}

// MockLookupResources2MockRecorder is the mock recorder for MockLookupResources2.
type MockLookupResources2MockRecorder struct {
	mock *MockLookupResources2
}

// NewMockLookupResources2 creates a new mock instance.
func NewMockLookupResources2(ctrl *gomock.Controller) *MockLookupResources2 {
	mock := &MockLookupResources2{ctrl: ctrl}
	mock.recorder = &MockLookupResources2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupResources2) EXPECT() *MockLookupResources2MockRecorder {
	return m.recorder
}

// DispatchLookupResources2 mocks base method.
func (m *MockLookupResources2) DispatchLookupResources2(req *dispatchv1.DispatchLookupResources2Request, stream dispatch.LookupResources2Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupResources2", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupResources2 indicates an expected call of DispatchLookupResources2.
func (mr *MockLookupResources2MockRecorder) DispatchLookupResources2(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupResources2", reflect.TypeOf((*MockLookupResources2)(nil).DispatchLookupResources2), req, stream)
}

// MockLookupResources3 is a mock of LookupResources3 interface.
type MockLookupResources3 struct {
	ctrl     *gomock.Controller
	recorder *MockLookupResources3MockRecorder
	isgomock struct{}
}

// MockLookupResources3MockRecorder is the mock recorder for MockLookupResources3.
type MockLookupResources3MockRecorder struct {
	mock *MockLookupResources3
}

// NewMockLookupResources3 creates a new mock instance.
func NewMockLookupResources3(ctrl *gomock.Controller) *MockLookupResources3 {
	mock := &MockLookupResources3{ctrl: ctrl}
	mock.recorder = &MockLookupResources3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupResources3) EXPECT() *MockLookupResources3MockRecorder {
	return m.recorder
}

// DispatchLookupResources3 mocks base method.
func (m *MockLookupResources3) DispatchLookupResources3(req *dispatchv1.DispatchLookupResources3Request, stream dispatch.LookupResources3Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupResources3", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupResources3 indicates an expected call of DispatchLookupResources3.
func (mr *MockLookupResources3MockRecorder) DispatchLookupResources3(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupResources3", reflect.TypeOf((*MockLookupResources3)(nil).DispatchLookupResources3), req, stream)
}

// MockLookupSubjects is a mock of LookupSubjects interface.
type MockLookupSubjects struct {
	ctrl     *gomock.Controller
	recorder *MockLookupSubjectsMockRecorder
	isgomock struct{}
}

// MockLookupSubjectsMockRecorder is the mock recorder for MockLookupSubjects.
type MockLookupSubjectsMockRecorder struct {
	mock *MockLookupSubjects
}

// NewMockLookupSubjects creates a new mock instance.
func NewMockLookupSubjects(ctrl *gomock.Controller) *MockLookupSubjects {
	mock := &MockLookupSubjects{ctrl: ctrl}
	mock.recorder = &MockLookupSubjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupSubjects) EXPECT() *MockLookupSubjectsMockRecorder {
	return m.recorder
}

// DispatchLookupSubjects mocks base method.
func (m *MockLookupSubjects) DispatchLookupSubjects(req *dispatchv1.DispatchLookupSubjectsRequest, stream dispatch.LookupSubjectsStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchLookupSubjects", req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchLookupSubjects indicates an expected call of DispatchLookupSubjects.
func (mr *MockLookupSubjectsMockRecorder) DispatchLookupSubjects(req, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchLookupSubjects", reflect.TypeOf((*MockLookupSubjects)(nil).DispatchLookupSubjects), req, stream)
}

// MockDispatchableRequest is a mock of DispatchableRequest interface.
type MockDispatchableRequest struct {
	ctrl     *gomock.Controller
	recorder *MockDispatchableRequestMockRecorder
	isgomock struct{}
}

// MockDispatchableRequestMockRecorder is the mock recorder for MockDispatchableRequest.
type MockDispatchableRequestMockRecorder struct {
	mock *MockDispatchableRequest
}

// NewMockDispatchableRequest creates a new mock instance.
func NewMockDispatchableRequest(ctrl *gomock.Controller) *MockDispatchableRequest {
	mock := &MockDispatchableRequest{ctrl: ctrl}
	mock.recorder = &MockDispatchableRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatchableRequest) EXPECT() *MockDispatchableRequestMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method.
func (m *MockDispatchableRequest) GetMetadata() *dispatchv1.ResolverMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(*dispatchv1.ResolverMeta)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockDispatchableRequestMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockDispatchableRequest)(nil).GetMetadata))
}

// MarshalZerologObject mocks base method.
func (m *MockDispatchableRequest) MarshalZerologObject(e *zerolog.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarshalZerologObject", e)
}

// MarshalZerologObject indicates an expected call of MarshalZerologObject.
func (mr *MockDispatchableRequestMockRecorder) MarshalZerologObject(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalZerologObject", reflect.TypeOf((*MockDispatchableRequest)(nil).MarshalZerologObject), e)
}
