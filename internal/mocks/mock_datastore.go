// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -source datastore.go -destination ../../internal/mocks/mock_datastore.go -package mocks Datastore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/authzed/authzed-go/proto/authzed/api/v1"
	datastore "github.com/authzed/spicedb/pkg/datastore"
	options "github.com/authzed/spicedb/pkg/datastore/options"
	corev1 "github.com/authzed/spicedb/pkg/proto/core/v1"
	tuple "github.com/authzed/spicedb/pkg/tuple"
	gomock "go.uber.org/mock/gomock"
)

// MockSchemaDefinition is a mock of SchemaDefinition interface.
type MockSchemaDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaDefinitionMockRecorder
	isgomock struct{}
}

// MockSchemaDefinitionMockRecorder is the mock recorder for MockSchemaDefinition.
type MockSchemaDefinitionMockRecorder struct {
	mock *MockSchemaDefinition
}

// NewMockSchemaDefinition creates a new mock instance.
func NewMockSchemaDefinition(ctrl *gomock.Controller) *MockSchemaDefinition {
	mock := &MockSchemaDefinition{ctrl: ctrl}
	mock.recorder = &MockSchemaDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaDefinition) EXPECT() *MockSchemaDefinitionMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockSchemaDefinition) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockSchemaDefinitionMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockSchemaDefinition)(nil).GetName))
}

// SizeVT mocks base method.
func (m *MockSchemaDefinition) SizeVT() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SizeVT")
	ret0, _ := ret[0].(int)
	return ret0
}

// SizeVT indicates an expected call of SizeVT.
func (mr *MockSchemaDefinitionMockRecorder) SizeVT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SizeVT", reflect.TypeOf((*MockSchemaDefinition)(nil).SizeVT))
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// CountRelationships mocks base method.
func (m *MockReader) CountRelationships(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRelationships", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRelationships indicates an expected call of CountRelationships.
func (mr *MockReaderMockRecorder) CountRelationships(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRelationships", reflect.TypeOf((*MockReader)(nil).CountRelationships), ctx, name)
}

// ListAllCaveats mocks base method.
func (m *MockReader) ListAllCaveats(ctx context.Context) ([]datastore.RevisionedCaveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCaveats", ctx)
	ret0, _ := ret[0].([]datastore.RevisionedCaveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCaveats indicates an expected call of ListAllCaveats.
func (mr *MockReaderMockRecorder) ListAllCaveats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCaveats", reflect.TypeOf((*MockReader)(nil).ListAllCaveats), ctx)
}

// ListAllNamespaces mocks base method.
func (m *MockReader) ListAllNamespaces(ctx context.Context) ([]datastore.RevisionedNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNamespaces", ctx)
	ret0, _ := ret[0].([]datastore.RevisionedNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNamespaces indicates an expected call of ListAllNamespaces.
func (mr *MockReaderMockRecorder) ListAllNamespaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNamespaces", reflect.TypeOf((*MockReader)(nil).ListAllNamespaces), ctx)
}

// LookupCaveatsWithNames mocks base method.
func (m *MockReader) LookupCaveatsWithNames(ctx context.Context, names []string) ([]datastore.RevisionedCaveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCaveatsWithNames", ctx, names)
	ret0, _ := ret[0].([]datastore.RevisionedCaveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCaveatsWithNames indicates an expected call of LookupCaveatsWithNames.
func (mr *MockReaderMockRecorder) LookupCaveatsWithNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCaveatsWithNames", reflect.TypeOf((*MockReader)(nil).LookupCaveatsWithNames), ctx, names)
}

// LookupCounters mocks base method.
func (m *MockReader) LookupCounters(ctx context.Context) ([]datastore.RelationshipCounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCounters", ctx)
	ret0, _ := ret[0].([]datastore.RelationshipCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCounters indicates an expected call of LookupCounters.
func (mr *MockReaderMockRecorder) LookupCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCounters", reflect.TypeOf((*MockReader)(nil).LookupCounters), ctx)
}

// LookupNamespacesWithNames mocks base method.
func (m *MockReader) LookupNamespacesWithNames(ctx context.Context, nsNames []string) ([]datastore.RevisionedNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNamespacesWithNames", ctx, nsNames)
	ret0, _ := ret[0].([]datastore.RevisionedNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNamespacesWithNames indicates an expected call of LookupNamespacesWithNames.
func (mr *MockReaderMockRecorder) LookupNamespacesWithNames(ctx, nsNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNamespacesWithNames", reflect.TypeOf((*MockReader)(nil).LookupNamespacesWithNames), ctx, nsNames)
}

// QueryRelationships mocks base method.
func (m *MockReader) QueryRelationships(ctx context.Context, filter datastore.RelationshipsFilter, arg2 ...options.QueryOptionsOption) (datastore.RelationshipIterator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRelationships", varargs...)
	ret0, _ := ret[0].(datastore.RelationshipIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationships indicates an expected call of QueryRelationships.
func (mr *MockReaderMockRecorder) QueryRelationships(ctx, filter any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationships", reflect.TypeOf((*MockReader)(nil).QueryRelationships), varargs...)
}

// ReadCaveatByName mocks base method.
func (m *MockReader) ReadCaveatByName(ctx context.Context, name string) (*corev1.CaveatDefinition, datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCaveatByName", ctx, name)
	ret0, _ := ret[0].(*corev1.CaveatDefinition)
	ret1, _ := ret[1].(datastore.Revision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadCaveatByName indicates an expected call of ReadCaveatByName.
func (mr *MockReaderMockRecorder) ReadCaveatByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCaveatByName", reflect.TypeOf((*MockReader)(nil).ReadCaveatByName), ctx, name)
}

// ReadNamespaceByName mocks base method.
func (m *MockReader) ReadNamespaceByName(ctx context.Context, nsName string) (*corev1.NamespaceDefinition, datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNamespaceByName", ctx, nsName)
	ret0, _ := ret[0].(*corev1.NamespaceDefinition)
	ret1, _ := ret[1].(datastore.Revision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNamespaceByName indicates an expected call of ReadNamespaceByName.
func (mr *MockReaderMockRecorder) ReadNamespaceByName(ctx, nsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNamespaceByName", reflect.TypeOf((*MockReader)(nil).ReadNamespaceByName), ctx, nsName)
}

// ReverseQueryRelationships mocks base method.
func (m *MockReader) ReverseQueryRelationships(ctx context.Context, subjectsFilter datastore.SubjectsFilter, arg2 ...options.ReverseQueryOptionsOption) (datastore.RelationshipIterator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectsFilter}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseQueryRelationships", varargs...)
	ret0, _ := ret[0].(datastore.RelationshipIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseQueryRelationships indicates an expected call of ReverseQueryRelationships.
func (mr *MockReaderMockRecorder) ReverseQueryRelationships(ctx, subjectsFilter any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectsFilter}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseQueryRelationships", reflect.TypeOf((*MockReader)(nil).ReverseQueryRelationships), varargs...)
}

// MockReadWriteTransaction is a mock of ReadWriteTransaction interface.
type MockReadWriteTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteTransactionMockRecorder
	isgomock struct{}
}

// MockReadWriteTransactionMockRecorder is the mock recorder for MockReadWriteTransaction.
type MockReadWriteTransactionMockRecorder struct {
	mock *MockReadWriteTransaction
}

// NewMockReadWriteTransaction creates a new mock instance.
func NewMockReadWriteTransaction(ctrl *gomock.Controller) *MockReadWriteTransaction {
	mock := &MockReadWriteTransaction{ctrl: ctrl}
	mock.recorder = &MockReadWriteTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteTransaction) EXPECT() *MockReadWriteTransactionMockRecorder {
	return m.recorder
}

// BulkLoad mocks base method.
func (m *MockReadWriteTransaction) BulkLoad(ctx context.Context, iter datastore.BulkWriteRelationshipSource) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkLoad", ctx, iter)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkLoad indicates an expected call of BulkLoad.
func (mr *MockReadWriteTransactionMockRecorder) BulkLoad(ctx, iter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkLoad", reflect.TypeOf((*MockReadWriteTransaction)(nil).BulkLoad), ctx, iter)
}

// CountRelationships mocks base method.
func (m *MockReadWriteTransaction) CountRelationships(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRelationships", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRelationships indicates an expected call of CountRelationships.
func (mr *MockReadWriteTransactionMockRecorder) CountRelationships(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRelationships", reflect.TypeOf((*MockReadWriteTransaction)(nil).CountRelationships), ctx, name)
}

// DeleteCaveats mocks base method.
func (m *MockReadWriteTransaction) DeleteCaveats(ctx context.Context, names []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCaveats", ctx, names)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCaveats indicates an expected call of DeleteCaveats.
func (mr *MockReadWriteTransactionMockRecorder) DeleteCaveats(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCaveats", reflect.TypeOf((*MockReadWriteTransaction)(nil).DeleteCaveats), ctx, names)
}

// DeleteNamespaces mocks base method.
func (m *MockReadWriteTransaction) DeleteNamespaces(ctx context.Context, nsNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range nsNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaces", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespaces indicates an expected call of DeleteNamespaces.
func (mr *MockReadWriteTransactionMockRecorder) DeleteNamespaces(ctx any, nsNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, nsNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaces", reflect.TypeOf((*MockReadWriteTransaction)(nil).DeleteNamespaces), varargs...)
}

// DeleteRelationships mocks base method.
func (m *MockReadWriteTransaction) DeleteRelationships(ctx context.Context, filter *v1.RelationshipFilter, arg2 ...options.DeleteOptionsOption) (uint64, bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRelationships", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteRelationships indicates an expected call of DeleteRelationships.
func (mr *MockReadWriteTransactionMockRecorder) DeleteRelationships(ctx, filter any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelationships", reflect.TypeOf((*MockReadWriteTransaction)(nil).DeleteRelationships), varargs...)
}

// ListAllCaveats mocks base method.
func (m *MockReadWriteTransaction) ListAllCaveats(ctx context.Context) ([]datastore.RevisionedCaveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCaveats", ctx)
	ret0, _ := ret[0].([]datastore.RevisionedCaveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCaveats indicates an expected call of ListAllCaveats.
func (mr *MockReadWriteTransactionMockRecorder) ListAllCaveats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCaveats", reflect.TypeOf((*MockReadWriteTransaction)(nil).ListAllCaveats), ctx)
}

// ListAllNamespaces mocks base method.
func (m *MockReadWriteTransaction) ListAllNamespaces(ctx context.Context) ([]datastore.RevisionedNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNamespaces", ctx)
	ret0, _ := ret[0].([]datastore.RevisionedNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNamespaces indicates an expected call of ListAllNamespaces.
func (mr *MockReadWriteTransactionMockRecorder) ListAllNamespaces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNamespaces", reflect.TypeOf((*MockReadWriteTransaction)(nil).ListAllNamespaces), ctx)
}

// LookupCaveatsWithNames mocks base method.
func (m *MockReadWriteTransaction) LookupCaveatsWithNames(ctx context.Context, names []string) ([]datastore.RevisionedCaveat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCaveatsWithNames", ctx, names)
	ret0, _ := ret[0].([]datastore.RevisionedCaveat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCaveatsWithNames indicates an expected call of LookupCaveatsWithNames.
func (mr *MockReadWriteTransactionMockRecorder) LookupCaveatsWithNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCaveatsWithNames", reflect.TypeOf((*MockReadWriteTransaction)(nil).LookupCaveatsWithNames), ctx, names)
}

// LookupCounters mocks base method.
func (m *MockReadWriteTransaction) LookupCounters(ctx context.Context) ([]datastore.RelationshipCounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCounters", ctx)
	ret0, _ := ret[0].([]datastore.RelationshipCounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCounters indicates an expected call of LookupCounters.
func (mr *MockReadWriteTransactionMockRecorder) LookupCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCounters", reflect.TypeOf((*MockReadWriteTransaction)(nil).LookupCounters), ctx)
}

// LookupNamespacesWithNames mocks base method.
func (m *MockReadWriteTransaction) LookupNamespacesWithNames(ctx context.Context, nsNames []string) ([]datastore.RevisionedNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNamespacesWithNames", ctx, nsNames)
	ret0, _ := ret[0].([]datastore.RevisionedNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNamespacesWithNames indicates an expected call of LookupNamespacesWithNames.
func (mr *MockReadWriteTransactionMockRecorder) LookupNamespacesWithNames(ctx, nsNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNamespacesWithNames", reflect.TypeOf((*MockReadWriteTransaction)(nil).LookupNamespacesWithNames), ctx, nsNames)
}

// QueryRelationships mocks base method.
func (m *MockReadWriteTransaction) QueryRelationships(ctx context.Context, filter datastore.RelationshipsFilter, arg2 ...options.QueryOptionsOption) (datastore.RelationshipIterator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRelationships", varargs...)
	ret0, _ := ret[0].(datastore.RelationshipIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRelationships indicates an expected call of QueryRelationships.
func (mr *MockReadWriteTransactionMockRecorder) QueryRelationships(ctx, filter any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelationships", reflect.TypeOf((*MockReadWriteTransaction)(nil).QueryRelationships), varargs...)
}

// ReadCaveatByName mocks base method.
func (m *MockReadWriteTransaction) ReadCaveatByName(ctx context.Context, name string) (*corev1.CaveatDefinition, datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCaveatByName", ctx, name)
	ret0, _ := ret[0].(*corev1.CaveatDefinition)
	ret1, _ := ret[1].(datastore.Revision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadCaveatByName indicates an expected call of ReadCaveatByName.
func (mr *MockReadWriteTransactionMockRecorder) ReadCaveatByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCaveatByName", reflect.TypeOf((*MockReadWriteTransaction)(nil).ReadCaveatByName), ctx, name)
}

// ReadNamespaceByName mocks base method.
func (m *MockReadWriteTransaction) ReadNamespaceByName(ctx context.Context, nsName string) (*corev1.NamespaceDefinition, datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNamespaceByName", ctx, nsName)
	ret0, _ := ret[0].(*corev1.NamespaceDefinition)
	ret1, _ := ret[1].(datastore.Revision)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadNamespaceByName indicates an expected call of ReadNamespaceByName.
func (mr *MockReadWriteTransactionMockRecorder) ReadNamespaceByName(ctx, nsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNamespaceByName", reflect.TypeOf((*MockReadWriteTransaction)(nil).ReadNamespaceByName), ctx, nsName)
}

// RegisterCounter mocks base method.
func (m *MockReadWriteTransaction) RegisterCounter(ctx context.Context, name string, filter *corev1.RelationshipFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCounter", ctx, name, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCounter indicates an expected call of RegisterCounter.
func (mr *MockReadWriteTransactionMockRecorder) RegisterCounter(ctx, name, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCounter", reflect.TypeOf((*MockReadWriteTransaction)(nil).RegisterCounter), ctx, name, filter)
}

// ReverseQueryRelationships mocks base method.
func (m *MockReadWriteTransaction) ReverseQueryRelationships(ctx context.Context, subjectsFilter datastore.SubjectsFilter, arg2 ...options.ReverseQueryOptionsOption) (datastore.RelationshipIterator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subjectsFilter}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReverseQueryRelationships", varargs...)
	ret0, _ := ret[0].(datastore.RelationshipIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseQueryRelationships indicates an expected call of ReverseQueryRelationships.
func (mr *MockReadWriteTransactionMockRecorder) ReverseQueryRelationships(ctx, subjectsFilter any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subjectsFilter}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseQueryRelationships", reflect.TypeOf((*MockReadWriteTransaction)(nil).ReverseQueryRelationships), varargs...)
}

// StoreCounterValue mocks base method.
func (m *MockReadWriteTransaction) StoreCounterValue(ctx context.Context, name string, value int, computedAtRevision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCounterValue", ctx, name, value, computedAtRevision)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCounterValue indicates an expected call of StoreCounterValue.
func (mr *MockReadWriteTransactionMockRecorder) StoreCounterValue(ctx, name, value, computedAtRevision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCounterValue", reflect.TypeOf((*MockReadWriteTransaction)(nil).StoreCounterValue), ctx, name, value, computedAtRevision)
}

// UnregisterCounter mocks base method.
func (m *MockReadWriteTransaction) UnregisterCounter(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterCounter", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterCounter indicates an expected call of UnregisterCounter.
func (mr *MockReadWriteTransactionMockRecorder) UnregisterCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterCounter", reflect.TypeOf((*MockReadWriteTransaction)(nil).UnregisterCounter), ctx, name)
}

// WriteCaveats mocks base method.
func (m *MockReadWriteTransaction) WriteCaveats(arg0 context.Context, arg1 []*corev1.CaveatDefinition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCaveats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCaveats indicates an expected call of WriteCaveats.
func (mr *MockReadWriteTransactionMockRecorder) WriteCaveats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCaveats", reflect.TypeOf((*MockReadWriteTransaction)(nil).WriteCaveats), arg0, arg1)
}

// WriteNamespaces mocks base method.
func (m *MockReadWriteTransaction) WriteNamespaces(ctx context.Context, newConfigs ...*corev1.NamespaceDefinition) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range newConfigs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteNamespaces", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteNamespaces indicates an expected call of WriteNamespaces.
func (mr *MockReadWriteTransactionMockRecorder) WriteNamespaces(ctx any, newConfigs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, newConfigs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteNamespaces", reflect.TypeOf((*MockReadWriteTransaction)(nil).WriteNamespaces), varargs...)
}

// WriteRelationships mocks base method.
func (m *MockReadWriteTransaction) WriteRelationships(ctx context.Context, mutations []tuple.RelationshipUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRelationships", ctx, mutations)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRelationships indicates an expected call of WriteRelationships.
func (mr *MockReadWriteTransactionMockRecorder) WriteRelationships(ctx, mutations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRelationships", reflect.TypeOf((*MockReadWriteTransaction)(nil).WriteRelationships), ctx, mutations)
}

// MockBulkWriteRelationshipSource is a mock of BulkWriteRelationshipSource interface.
type MockBulkWriteRelationshipSource struct {
	ctrl     *gomock.Controller
	recorder *MockBulkWriteRelationshipSourceMockRecorder
	isgomock struct{}
}

// MockBulkWriteRelationshipSourceMockRecorder is the mock recorder for MockBulkWriteRelationshipSource.
type MockBulkWriteRelationshipSourceMockRecorder struct {
	mock *MockBulkWriteRelationshipSource
}

// NewMockBulkWriteRelationshipSource creates a new mock instance.
func NewMockBulkWriteRelationshipSource(ctrl *gomock.Controller) *MockBulkWriteRelationshipSource {
	mock := &MockBulkWriteRelationshipSource{ctrl: ctrl}
	mock.recorder = &MockBulkWriteRelationshipSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkWriteRelationshipSource) EXPECT() *MockBulkWriteRelationshipSourceMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockBulkWriteRelationshipSource) Next(ctx context.Context) (*tuple.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(*tuple.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockBulkWriteRelationshipSourceMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockBulkWriteRelationshipSource)(nil).Next), ctx)
}

// MockReadOnlyDatastore is a mock of ReadOnlyDatastore interface.
type MockReadOnlyDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyDatastoreMockRecorder
	isgomock struct{}
}

// MockReadOnlyDatastoreMockRecorder is the mock recorder for MockReadOnlyDatastore.
type MockReadOnlyDatastoreMockRecorder struct {
	mock *MockReadOnlyDatastore
}

// NewMockReadOnlyDatastore creates a new mock instance.
func NewMockReadOnlyDatastore(ctrl *gomock.Controller) *MockReadOnlyDatastore {
	mock := &MockReadOnlyDatastore{ctrl: ctrl}
	mock.recorder = &MockReadOnlyDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyDatastore) EXPECT() *MockReadOnlyDatastoreMockRecorder {
	return m.recorder
}

// CheckRevision mocks base method.
func (m *MockReadOnlyDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockReadOnlyDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockReadOnlyDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockReadOnlyDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadOnlyDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadOnlyDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockReadOnlyDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockReadOnlyDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockReadOnlyDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockReadOnlyDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockReadOnlyDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockReadOnlyDatastore)(nil).HeadRevision), ctx)
}

// MetricsID mocks base method.
func (m *MockReadOnlyDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockReadOnlyDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockReadOnlyDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockReadOnlyDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockReadOnlyDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockReadOnlyDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockReadOnlyDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockReadOnlyDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockReadOnlyDatastore)(nil).OptimizedRevision), ctx)
}

// ReadyState mocks base method.
func (m *MockReadOnlyDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockReadOnlyDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockReadOnlyDatastore)(nil).ReadyState), ctx)
}

// RevisionFromString mocks base method.
func (m *MockReadOnlyDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockReadOnlyDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockReadOnlyDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockReadOnlyDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockReadOnlyDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockReadOnlyDatastore)(nil).SnapshotReader), arg0)
}

// Statistics mocks base method.
func (m *MockReadOnlyDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockReadOnlyDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockReadOnlyDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockReadOnlyDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockReadOnlyDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockReadOnlyDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockReadOnlyDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockReadOnlyDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockReadOnlyDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockDatastore is a mock of Datastore interface.
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
	isgomock struct{}
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore.
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance.
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// CheckRevision mocks base method.
func (m *MockDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockDatastore)(nil).HeadRevision), ctx)
}

// MetricsID mocks base method.
func (m *MockDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockDatastore)(nil).OptimizedRevision), ctx)
}

// ReadWriteTx mocks base method.
func (m *MockDatastore) ReadWriteTx(arg0 context.Context, arg1 datastore.TxUserFunc, arg2 ...options.RWTOptionsOption) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWriteTx", varargs...)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWriteTx indicates an expected call of ReadWriteTx.
func (mr *MockDatastoreMockRecorder) ReadWriteTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteTx", reflect.TypeOf((*MockDatastore)(nil).ReadWriteTx), varargs...)
}

// ReadyState mocks base method.
func (m *MockDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockDatastore)(nil).ReadyState), ctx)
}

// RevisionFromString mocks base method.
func (m *MockDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockDatastore)(nil).SnapshotReader), arg0)
}

// Statistics mocks base method.
func (m *MockDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockExplainable is a mock of Explainable interface.
type MockExplainable struct {
	ctrl     *gomock.Controller
	recorder *MockExplainableMockRecorder
	isgomock struct{}
}

// MockExplainableMockRecorder is the mock recorder for MockExplainable.
type MockExplainableMockRecorder struct {
	mock *MockExplainable
}

// NewMockExplainable creates a new mock instance.
func NewMockExplainable(ctrl *gomock.Controller) *MockExplainable {
	mock := &MockExplainable{ctrl: ctrl}
	mock.recorder = &MockExplainableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExplainable) EXPECT() *MockExplainableMockRecorder {
	return m.recorder
}

// BuildExplainQuery mocks base method.
func (m *MockExplainable) BuildExplainQuery(sql string, args []any) (string, []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildExplainQuery", sql, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildExplainQuery indicates an expected call of BuildExplainQuery.
func (mr *MockExplainableMockRecorder) BuildExplainQuery(sql, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildExplainQuery", reflect.TypeOf((*MockExplainable)(nil).BuildExplainQuery), sql, args)
}

// ParseExplain mocks base method.
func (m *MockExplainable) ParseExplain(explain string) (datastore.ParsedExplain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExplain", explain)
	ret0, _ := ret[0].(datastore.ParsedExplain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseExplain indicates an expected call of ParseExplain.
func (mr *MockExplainableMockRecorder) ParseExplain(explain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExplain", reflect.TypeOf((*MockExplainable)(nil).ParseExplain), explain)
}

// PreExplainStatements mocks base method.
func (m *MockExplainable) PreExplainStatements() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreExplainStatements")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PreExplainStatements indicates an expected call of PreExplainStatements.
func (mr *MockExplainableMockRecorder) PreExplainStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreExplainStatements", reflect.TypeOf((*MockExplainable)(nil).PreExplainStatements))
}

// MockSQLDatastore is a mock of SQLDatastore interface.
type MockSQLDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockSQLDatastoreMockRecorder
	isgomock struct{}
}

// MockSQLDatastoreMockRecorder is the mock recorder for MockSQLDatastore.
type MockSQLDatastoreMockRecorder struct {
	mock *MockSQLDatastore
}

// NewMockSQLDatastore creates a new mock instance.
func NewMockSQLDatastore(ctrl *gomock.Controller) *MockSQLDatastore {
	mock := &MockSQLDatastore{ctrl: ctrl}
	mock.recorder = &MockSQLDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLDatastore) EXPECT() *MockSQLDatastoreMockRecorder {
	return m.recorder
}

// BuildExplainQuery mocks base method.
func (m *MockSQLDatastore) BuildExplainQuery(sql string, args []any) (string, []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildExplainQuery", sql, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildExplainQuery indicates an expected call of BuildExplainQuery.
func (mr *MockSQLDatastoreMockRecorder) BuildExplainQuery(sql, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildExplainQuery", reflect.TypeOf((*MockSQLDatastore)(nil).BuildExplainQuery), sql, args)
}

// CheckRevision mocks base method.
func (m *MockSQLDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockSQLDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockSQLDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockSQLDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSQLDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockSQLDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockSQLDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockSQLDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockSQLDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockSQLDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockSQLDatastore)(nil).HeadRevision), ctx)
}

// MetricsID mocks base method.
func (m *MockSQLDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockSQLDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockSQLDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockSQLDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockSQLDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockSQLDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockSQLDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockSQLDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockSQLDatastore)(nil).OptimizedRevision), ctx)
}

// ParseExplain mocks base method.
func (m *MockSQLDatastore) ParseExplain(explain string) (datastore.ParsedExplain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExplain", explain)
	ret0, _ := ret[0].(datastore.ParsedExplain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseExplain indicates an expected call of ParseExplain.
func (mr *MockSQLDatastoreMockRecorder) ParseExplain(explain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExplain", reflect.TypeOf((*MockSQLDatastore)(nil).ParseExplain), explain)
}

// PreExplainStatements mocks base method.
func (m *MockSQLDatastore) PreExplainStatements() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreExplainStatements")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PreExplainStatements indicates an expected call of PreExplainStatements.
func (mr *MockSQLDatastoreMockRecorder) PreExplainStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreExplainStatements", reflect.TypeOf((*MockSQLDatastore)(nil).PreExplainStatements))
}

// ReadWriteTx mocks base method.
func (m *MockSQLDatastore) ReadWriteTx(arg0 context.Context, arg1 datastore.TxUserFunc, arg2 ...options.RWTOptionsOption) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWriteTx", varargs...)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWriteTx indicates an expected call of ReadWriteTx.
func (mr *MockSQLDatastoreMockRecorder) ReadWriteTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteTx", reflect.TypeOf((*MockSQLDatastore)(nil).ReadWriteTx), varargs...)
}

// ReadyState mocks base method.
func (m *MockSQLDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockSQLDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockSQLDatastore)(nil).ReadyState), ctx)
}

// RevisionFromString mocks base method.
func (m *MockSQLDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockSQLDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockSQLDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockSQLDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockSQLDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockSQLDatastore)(nil).SnapshotReader), arg0)
}

// Statistics mocks base method.
func (m *MockSQLDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockSQLDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockSQLDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockSQLDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockSQLDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockSQLDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockSQLDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockSQLDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockSQLDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockStrictReadDatastore is a mock of StrictReadDatastore interface.
type MockStrictReadDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockStrictReadDatastoreMockRecorder
	isgomock struct{}
}

// MockStrictReadDatastoreMockRecorder is the mock recorder for MockStrictReadDatastore.
type MockStrictReadDatastoreMockRecorder struct {
	mock *MockStrictReadDatastore
}

// NewMockStrictReadDatastore creates a new mock instance.
func NewMockStrictReadDatastore(ctrl *gomock.Controller) *MockStrictReadDatastore {
	mock := &MockStrictReadDatastore{ctrl: ctrl}
	mock.recorder = &MockStrictReadDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrictReadDatastore) EXPECT() *MockStrictReadDatastoreMockRecorder {
	return m.recorder
}

// CheckRevision mocks base method.
func (m *MockStrictReadDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockStrictReadDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockStrictReadDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockStrictReadDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStrictReadDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStrictReadDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockStrictReadDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockStrictReadDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockStrictReadDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockStrictReadDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockStrictReadDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockStrictReadDatastore)(nil).HeadRevision), ctx)
}

// IsStrictReadModeEnabled mocks base method.
func (m *MockStrictReadDatastore) IsStrictReadModeEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStrictReadModeEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStrictReadModeEnabled indicates an expected call of IsStrictReadModeEnabled.
func (mr *MockStrictReadDatastoreMockRecorder) IsStrictReadModeEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStrictReadModeEnabled", reflect.TypeOf((*MockStrictReadDatastore)(nil).IsStrictReadModeEnabled))
}

// MetricsID mocks base method.
func (m *MockStrictReadDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockStrictReadDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockStrictReadDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockStrictReadDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockStrictReadDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockStrictReadDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockStrictReadDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockStrictReadDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockStrictReadDatastore)(nil).OptimizedRevision), ctx)
}

// ReadWriteTx mocks base method.
func (m *MockStrictReadDatastore) ReadWriteTx(arg0 context.Context, arg1 datastore.TxUserFunc, arg2 ...options.RWTOptionsOption) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWriteTx", varargs...)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWriteTx indicates an expected call of ReadWriteTx.
func (mr *MockStrictReadDatastoreMockRecorder) ReadWriteTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteTx", reflect.TypeOf((*MockStrictReadDatastore)(nil).ReadWriteTx), varargs...)
}

// ReadyState mocks base method.
func (m *MockStrictReadDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockStrictReadDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockStrictReadDatastore)(nil).ReadyState), ctx)
}

// RevisionFromString mocks base method.
func (m *MockStrictReadDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockStrictReadDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockStrictReadDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockStrictReadDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockStrictReadDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockStrictReadDatastore)(nil).SnapshotReader), arg0)
}

// Statistics mocks base method.
func (m *MockStrictReadDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockStrictReadDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockStrictReadDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockStrictReadDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockStrictReadDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockStrictReadDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockStrictReadDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockStrictReadDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStrictReadDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockStartableDatastore is a mock of StartableDatastore interface.
type MockStartableDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockStartableDatastoreMockRecorder
	isgomock struct{}
}

// MockStartableDatastoreMockRecorder is the mock recorder for MockStartableDatastore.
type MockStartableDatastoreMockRecorder struct {
	mock *MockStartableDatastore
}

// NewMockStartableDatastore creates a new mock instance.
func NewMockStartableDatastore(ctrl *gomock.Controller) *MockStartableDatastore {
	mock := &MockStartableDatastore{ctrl: ctrl}
	mock.recorder = &MockStartableDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStartableDatastore) EXPECT() *MockStartableDatastoreMockRecorder {
	return m.recorder
}

// CheckRevision mocks base method.
func (m *MockStartableDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockStartableDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockStartableDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockStartableDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStartableDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStartableDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockStartableDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockStartableDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockStartableDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockStartableDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockStartableDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockStartableDatastore)(nil).HeadRevision), ctx)
}

// MetricsID mocks base method.
func (m *MockStartableDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockStartableDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockStartableDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockStartableDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockStartableDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockStartableDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockStartableDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockStartableDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockStartableDatastore)(nil).OptimizedRevision), ctx)
}

// ReadWriteTx mocks base method.
func (m *MockStartableDatastore) ReadWriteTx(arg0 context.Context, arg1 datastore.TxUserFunc, arg2 ...options.RWTOptionsOption) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWriteTx", varargs...)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWriteTx indicates an expected call of ReadWriteTx.
func (mr *MockStartableDatastoreMockRecorder) ReadWriteTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteTx", reflect.TypeOf((*MockStartableDatastore)(nil).ReadWriteTx), varargs...)
}

// ReadyState mocks base method.
func (m *MockStartableDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockStartableDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockStartableDatastore)(nil).ReadyState), ctx)
}

// RevisionFromString mocks base method.
func (m *MockStartableDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockStartableDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockStartableDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockStartableDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockStartableDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockStartableDatastore)(nil).SnapshotReader), arg0)
}

// Start mocks base method.
func (m *MockStartableDatastore) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStartableDatastoreMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStartableDatastore)(nil).Start), ctx)
}

// Statistics mocks base method.
func (m *MockStartableDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockStartableDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockStartableDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockStartableDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockStartableDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockStartableDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockStartableDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockStartableDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStartableDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockRepairableDatastore is a mock of RepairableDatastore interface.
type MockRepairableDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockRepairableDatastoreMockRecorder
	isgomock struct{}
}

// MockRepairableDatastoreMockRecorder is the mock recorder for MockRepairableDatastore.
type MockRepairableDatastoreMockRecorder struct {
	mock *MockRepairableDatastore
}

// NewMockRepairableDatastore creates a new mock instance.
func NewMockRepairableDatastore(ctrl *gomock.Controller) *MockRepairableDatastore {
	mock := &MockRepairableDatastore{ctrl: ctrl}
	mock.recorder = &MockRepairableDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepairableDatastore) EXPECT() *MockRepairableDatastoreMockRecorder {
	return m.recorder
}

// CheckRevision mocks base method.
func (m *MockRepairableDatastore) CheckRevision(ctx context.Context, revision datastore.Revision) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRevision", ctx, revision)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRevision indicates an expected call of CheckRevision.
func (mr *MockRepairableDatastoreMockRecorder) CheckRevision(ctx, revision any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRevision", reflect.TypeOf((*MockRepairableDatastore)(nil).CheckRevision), ctx, revision)
}

// Close mocks base method.
func (m *MockRepairableDatastore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepairableDatastoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepairableDatastore)(nil).Close))
}

// Features mocks base method.
func (m *MockRepairableDatastore) Features(ctx context.Context) (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Features", ctx)
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Features indicates an expected call of Features.
func (mr *MockRepairableDatastoreMockRecorder) Features(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockRepairableDatastore)(nil).Features), ctx)
}

// HeadRevision mocks base method.
func (m *MockRepairableDatastore) HeadRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadRevision indicates an expected call of HeadRevision.
func (mr *MockRepairableDatastoreMockRecorder) HeadRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadRevision", reflect.TypeOf((*MockRepairableDatastore)(nil).HeadRevision), ctx)
}

// MetricsID mocks base method.
func (m *MockRepairableDatastore) MetricsID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricsID indicates an expected call of MetricsID.
func (mr *MockRepairableDatastoreMockRecorder) MetricsID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsID", reflect.TypeOf((*MockRepairableDatastore)(nil).MetricsID))
}

// OfflineFeatures mocks base method.
func (m *MockRepairableDatastore) OfflineFeatures() (*datastore.Features, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineFeatures")
	ret0, _ := ret[0].(*datastore.Features)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfflineFeatures indicates an expected call of OfflineFeatures.
func (mr *MockRepairableDatastoreMockRecorder) OfflineFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineFeatures", reflect.TypeOf((*MockRepairableDatastore)(nil).OfflineFeatures))
}

// OptimizedRevision mocks base method.
func (m *MockRepairableDatastore) OptimizedRevision(ctx context.Context) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptimizedRevision", ctx)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptimizedRevision indicates an expected call of OptimizedRevision.
func (mr *MockRepairableDatastoreMockRecorder) OptimizedRevision(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimizedRevision", reflect.TypeOf((*MockRepairableDatastore)(nil).OptimizedRevision), ctx)
}

// ReadWriteTx mocks base method.
func (m *MockRepairableDatastore) ReadWriteTx(arg0 context.Context, arg1 datastore.TxUserFunc, arg2 ...options.RWTOptionsOption) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWriteTx", varargs...)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWriteTx indicates an expected call of ReadWriteTx.
func (mr *MockRepairableDatastoreMockRecorder) ReadWriteTx(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWriteTx", reflect.TypeOf((*MockRepairableDatastore)(nil).ReadWriteTx), varargs...)
}

// ReadyState mocks base method.
func (m *MockRepairableDatastore) ReadyState(ctx context.Context) (datastore.ReadyState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyState", ctx)
	ret0, _ := ret[0].(datastore.ReadyState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadyState indicates an expected call of ReadyState.
func (mr *MockRepairableDatastoreMockRecorder) ReadyState(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyState", reflect.TypeOf((*MockRepairableDatastore)(nil).ReadyState), ctx)
}

// Repair mocks base method.
func (m *MockRepairableDatastore) Repair(ctx context.Context, operationName string, outputProgress bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repair", ctx, operationName, outputProgress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair.
func (mr *MockRepairableDatastoreMockRecorder) Repair(ctx, operationName, outputProgress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockRepairableDatastore)(nil).Repair), ctx, operationName, outputProgress)
}

// RepairOperations mocks base method.
func (m *MockRepairableDatastore) RepairOperations() []datastore.RepairOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepairOperations")
	ret0, _ := ret[0].([]datastore.RepairOperation)
	return ret0
}

// RepairOperations indicates an expected call of RepairOperations.
func (mr *MockRepairableDatastoreMockRecorder) RepairOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairOperations", reflect.TypeOf((*MockRepairableDatastore)(nil).RepairOperations))
}

// RevisionFromString mocks base method.
func (m *MockRepairableDatastore) RevisionFromString(serialized string) (datastore.Revision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionFromString", serialized)
	ret0, _ := ret[0].(datastore.Revision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionFromString indicates an expected call of RevisionFromString.
func (mr *MockRepairableDatastoreMockRecorder) RevisionFromString(serialized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionFromString", reflect.TypeOf((*MockRepairableDatastore)(nil).RevisionFromString), serialized)
}

// SnapshotReader mocks base method.
func (m *MockRepairableDatastore) SnapshotReader(arg0 datastore.Revision) datastore.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotReader", arg0)
	ret0, _ := ret[0].(datastore.Reader)
	return ret0
}

// SnapshotReader indicates an expected call of SnapshotReader.
func (mr *MockRepairableDatastoreMockRecorder) SnapshotReader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotReader", reflect.TypeOf((*MockRepairableDatastore)(nil).SnapshotReader), arg0)
}

// Statistics mocks base method.
func (m *MockRepairableDatastore) Statistics(ctx context.Context) (datastore.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx)
	ret0, _ := ret[0].(datastore.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockRepairableDatastoreMockRecorder) Statistics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockRepairableDatastore)(nil).Statistics), ctx)
}

// UniqueID mocks base method.
func (m *MockRepairableDatastore) UniqueID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockRepairableDatastoreMockRecorder) UniqueID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockRepairableDatastore)(nil).UniqueID), arg0)
}

// Watch mocks base method.
func (m *MockRepairableDatastore) Watch(ctx context.Context, afterRevision datastore.Revision, arg2 datastore.WatchOptions) (<-chan datastore.RevisionChanges, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, afterRevision, arg2)
	ret0, _ := ret[0].(<-chan datastore.RevisionChanges)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRepairableDatastoreMockRecorder) Watch(ctx, afterRevision, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRepairableDatastore)(nil).Watch), ctx, afterRevision, arg2)
}

// MockUnwrappableDatastore is a mock of UnwrappableDatastore interface.
type MockUnwrappableDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockUnwrappableDatastoreMockRecorder
	isgomock struct{}
}

// MockUnwrappableDatastoreMockRecorder is the mock recorder for MockUnwrappableDatastore.
type MockUnwrappableDatastoreMockRecorder struct {
	mock *MockUnwrappableDatastore
}

// NewMockUnwrappableDatastore creates a new mock instance.
func NewMockUnwrappableDatastore(ctrl *gomock.Controller) *MockUnwrappableDatastore {
	mock := &MockUnwrappableDatastore{ctrl: ctrl}
	mock.recorder = &MockUnwrappableDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnwrappableDatastore) EXPECT() *MockUnwrappableDatastoreMockRecorder {
	return m.recorder
}

// Unwrap mocks base method.
func (m *MockUnwrappableDatastore) Unwrap() datastore.Datastore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(datastore.Datastore)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockUnwrappableDatastoreMockRecorder) Unwrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockUnwrappableDatastore)(nil).Unwrap))
}

// MockRevision is a mock of Revision interface.
type MockRevision struct {
	ctrl     *gomock.Controller
	recorder *MockRevisionMockRecorder
	isgomock struct{}
}

// MockRevisionMockRecorder is the mock recorder for MockRevision.
type MockRevisionMockRecorder struct {
	mock *MockRevision
}

// NewMockRevision creates a new mock instance.
func NewMockRevision(ctrl *gomock.Controller) *MockRevision {
	mock := &MockRevision{ctrl: ctrl}
	mock.recorder = &MockRevisionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevision) EXPECT() *MockRevisionMockRecorder {
	return m.recorder
}

// ByteSortable mocks base method.
func (m *MockRevision) ByteSortable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByteSortable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ByteSortable indicates an expected call of ByteSortable.
func (mr *MockRevisionMockRecorder) ByteSortable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByteSortable", reflect.TypeOf((*MockRevision)(nil).ByteSortable))
}

// Equal mocks base method.
func (m *MockRevision) Equal(arg0 datastore.Revision) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockRevisionMockRecorder) Equal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockRevision)(nil).Equal), arg0)
}

// GreaterThan mocks base method.
func (m *MockRevision) GreaterThan(arg0 datastore.Revision) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GreaterThan", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GreaterThan indicates an expected call of GreaterThan.
func (mr *MockRevisionMockRecorder) GreaterThan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GreaterThan", reflect.TypeOf((*MockRevision)(nil).GreaterThan), arg0)
}

// LessThan mocks base method.
func (m *MockRevision) LessThan(arg0 datastore.Revision) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LessThan", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LessThan indicates an expected call of LessThan.
func (mr *MockRevisionMockRecorder) LessThan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LessThan", reflect.TypeOf((*MockRevision)(nil).LessThan), arg0)
}

// String mocks base method.
func (m *MockRevision) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockRevisionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockRevision)(nil).String))
}
