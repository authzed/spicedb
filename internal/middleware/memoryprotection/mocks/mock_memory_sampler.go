// Code generated by MockGen. DO NOT EDIT.
// Source: memory_sampler.go
//
// Generated by this command:
//
//	mockgen -source memory_sampler.go -destination ./mocks/mock_memory_sampler.go -package mocks MemorySampler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMemorySampler is a mock of MemorySampler interface.
type MockMemorySampler struct {
	ctrl     *gomock.Controller
	recorder *MockMemorySamplerMockRecorder
	isgomock struct{}
}

// MockMemorySamplerMockRecorder is the mock recorder for MockMemorySampler.
type MockMemorySamplerMockRecorder struct {
	mock *MockMemorySampler
}

// NewMockMemorySampler creates a new mock instance.
func NewMockMemorySampler(ctrl *gomock.Controller) *MockMemorySampler {
	mock := &MockMemorySampler{ctrl: ctrl}
	mock.recorder = &MockMemorySamplerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemorySampler) EXPECT() *MockMemorySamplerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMemorySampler) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMemorySamplerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMemorySampler)(nil).Close))
}

// GetIntervalSeconds mocks base method.
func (m *MockMemorySampler) GetIntervalSeconds() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntervalSeconds")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetIntervalSeconds indicates an expected call of GetIntervalSeconds.
func (mr *MockMemorySamplerMockRecorder) GetIntervalSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntervalSeconds", reflect.TypeOf((*MockMemorySampler)(nil).GetIntervalSeconds))
}

// GetMemoryUsagePercent mocks base method.
func (m *MockMemorySampler) GetMemoryUsagePercent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryUsagePercent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetMemoryUsagePercent indicates an expected call of GetMemoryUsagePercent.
func (mr *MockMemorySamplerMockRecorder) GetMemoryUsagePercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryUsagePercent", reflect.TypeOf((*MockMemorySampler)(nil).GetMemoryUsagePercent))
}

// GetTimestampLastMemorySample mocks base method.
func (m *MockMemorySampler) GetTimestampLastMemorySample() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestampLastMemorySample")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestampLastMemorySample indicates an expected call of GetTimestampLastMemorySample.
func (mr *MockMemorySamplerMockRecorder) GetTimestampLastMemorySample() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestampLastMemorySample", reflect.TypeOf((*MockMemorySampler)(nil).GetTimestampLastMemorySample))
}
