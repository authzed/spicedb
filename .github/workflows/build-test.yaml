---
name: "Build & Test"
on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - "main"
    paths:
      - ".github/workflows/build-test.yaml"
      - "buf.gen.yaml"
      - "buf.work.yaml"
      - "Dockerfile"
      - "go.mod"
      - "go.sum"
      - "cmd/**"
      - "pkg/**"
      - "e2e/**"
      - "internal/**"
      - "proto/**"
  pull_request:
    branches:
      - "*"
    paths:
      - ".github/workflows/build-test.yaml"
      - "buf.gen.yaml"
      - "buf.work.yaml"
      - "Dockerfile"
      - "go.mod"
      - "go.sum"
      - "cmd/**"
      - "pkg/**"
      - "e2e/**"
      - "internal/**"
      - "proto/**"
env:
  GO_VERSION: "~1.19.4"
jobs:
  build:
    name: "Build Binary"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - name: "go mod download" # prevent CI cache poisoning by getting all deps
        run: "go mod download"
      - uses: "authzed/actions/go-build@main"

  image-build:
    name: "Build Container Image"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "authzed/actions/docker-build@main"
        with:
          push: false
          tags: "authzed/spicedb:ci"
          buildx: false
          qemu: false
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - uses: "authzed/actions/go-test@main"
        with:
          working_directory: "cmd/spicedb"
          tags: "docker,image"

  unit:
    name: "Unit"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - uses: "authzed/actions/go-test@main"
        with:
          tags: "ci,skipintegrationtests"
          timeout: "10m"

  integration:
    name: "Integration Tests"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - uses: "authzed/actions/go-test@main"
        with:
          tags: "ci,docker"
          timeout: "15m"
          working_directory: "internal/services/integrationtesting"

  datastore:
    name: "Datastore Tests"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        datastore: ["crdb", "mysql", "postgres", "spanner"]
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - uses: "authzed/actions/go-test@main"
        with:
          tags: "ci,docker"
          timeout: "10m"
          working_directory: "internal/datastore/${{ matrix.datastore }}"

  datastoreconsistency:
    name: "Datastore Consistency Tests"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        datastore: ["cockroachdb", "mysql", "postgres", "spanner"]
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
      - name: "Run Datastore Consistency Tests"
        working-directory: "internal/services/integrationtesting"
        run: "go test --failfast -count=1 -timeout '10m' --tags='ci,docker,datastoreconsistency' ./... -run TestConsistencyPerDatastore/${{ matrix.datastore }}"

  e2e:
    name: "E2E"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
          cache-dependency-path: "e2e/go.sum"
      - name: "Cache Binaries"
        id: "cache-binaries"
        uses: "actions/cache@v2"
        with:
          path: |
            e2e/newenemy/cockroach
            e2e/newenemy/chaosd
            e2e/newenemy/watchmaker
          # this key will need to be bumped when dependencies are changed
          key: "cockroach-v22.1.5-chaosd-v1.1.1"
      - name: "Install cockroachdb and chaosd"
        if: "steps.cache-binaries.outputs.cache-hit != 'true'"
        working-directory: "e2e/newenemy"
        run: |
          curl https://binaries.cockroachdb.com/cockroach-v22.1.5.linux-amd64.tgz | tar -xz && mv cockroach-v22.1.5.linux-amd64/cockroach ./cockroach
          curl -fsSL https://mirrors.chaos-mesh.org/chaosd-v1.1.1-linux-amd64.tar.gz | tar -xz && mv chaosd-v1.1.1-linux-amd64/chaosd ./chaosd
      - uses: "actions/cache@v2"
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: "${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}"
          restore-keys: |
            ${{ runner.os }}-go-
      - name: "Build SpiceDB"
        run: |
          go get -d ./...
          go build -o ./e2e/newenemy/spicedb ./cmd/spicedb/...
      - name: "Run e2e"
        working-directory: "e2e/newenemy"
        run: |
          go test -v -timeout 11m ./...
      - uses: "actions/upload-artifact@v2"
        if: "always()"
        # this upload step is really flaky, don't fail the job if it fails
        continue-on-error: true
        with:
          name: "node-logs"
          path: "e2e/newenemy/*.log"
  analyzers-unit-tests:
    name: "Analyzers Unit Tests"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "true"
          cache-dependency-path: "tools/analyzers/go.sum"
      - uses: "authzed/actions/go-test@main"
        with:
          working_directory: "tools/analyzers"
  development:
    name: "WASM Tests"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "false" # do not cache to prevent cache poisoning
      - name: "Install wasmbrowsertest"
        run: "go install github.com/agnivade/wasmbrowsertest@latest"
      - name: "Run WASM Tests"
        run: "GOOS=js GOARCH=wasm go test ./pkg/development/wasm/... -exec wasmbrowsertest"

  protobuf:
    name: "Generate Protobufs"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "actions/setup-go@v3"
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache: "false" # do not cache to prevent cache poisoning
      - name: "Install Go Tools"
        run: "./hack/install-tools.sh"
      - uses: "authzed/actions/buf-generate@main"
      - uses: "bufbuild/buf-breaking-action@v1.1.1"
        if: "github.event_name == 'pull_request'"
        env:
          BUF_INPUT_HTTPS_USERNAME: "${{ github.actor }}"
          BUF_INPUT_HTTPS_PASSWORD: "${{ github.token }}"
        with:
          input: "proto/internal"
          against: "https://github.com/authzed/spicedb.git#branch=main,subdir=proto/internal"
          buf_token: "${{ secrets.BUF_REGISTRY_TOKEN }}"
