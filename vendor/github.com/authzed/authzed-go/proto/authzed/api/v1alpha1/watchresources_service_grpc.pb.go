// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchResourcesServiceClient is the client API for WatchResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchResourcesServiceClient interface {
	// WatchResources initiates a watch for permission changes for the provided
	// (resource type, permission, subject) pair.
	WatchResources(ctx context.Context, in *WatchResourcesRequest, opts ...grpc.CallOption) (WatchResourcesService_WatchResourcesClient, error)
}

type watchResourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchResourcesServiceClient(cc grpc.ClientConnInterface) WatchResourcesServiceClient {
	return &watchResourcesServiceClient{cc}
}

func (c *watchResourcesServiceClient) WatchResources(ctx context.Context, in *WatchResourcesRequest, opts ...grpc.CallOption) (WatchResourcesService_WatchResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &WatchResourcesService_ServiceDesc.Streams[0], "/authzed.api.v1alpha1.WatchResourcesService/WatchResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchResourcesServiceWatchResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchResourcesService_WatchResourcesClient interface {
	Recv() (*WatchResourcesResponse, error)
	grpc.ClientStream
}

type watchResourcesServiceWatchResourcesClient struct {
	grpc.ClientStream
}

func (x *watchResourcesServiceWatchResourcesClient) Recv() (*WatchResourcesResponse, error) {
	m := new(WatchResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WatchResourcesServiceServer is the server API for WatchResourcesService service.
// All implementations must embed UnimplementedWatchResourcesServiceServer
// for forward compatibility
type WatchResourcesServiceServer interface {
	// WatchResources initiates a watch for permission changes for the provided
	// (resource type, permission, subject) pair.
	WatchResources(*WatchResourcesRequest, WatchResourcesService_WatchResourcesServer) error
	mustEmbedUnimplementedWatchResourcesServiceServer()
}

// UnimplementedWatchResourcesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchResourcesServiceServer struct {
}

func (UnimplementedWatchResourcesServiceServer) WatchResources(*WatchResourcesRequest, WatchResourcesService_WatchResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchResources not implemented")
}
func (UnimplementedWatchResourcesServiceServer) mustEmbedUnimplementedWatchResourcesServiceServer() {}

// UnsafeWatchResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchResourcesServiceServer will
// result in compilation errors.
type UnsafeWatchResourcesServiceServer interface {
	mustEmbedUnimplementedWatchResourcesServiceServer()
}

func RegisterWatchResourcesServiceServer(s grpc.ServiceRegistrar, srv WatchResourcesServiceServer) {
	s.RegisterService(&WatchResourcesService_ServiceDesc, srv)
}

func _WatchResourcesService_WatchResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchResourcesServiceServer).WatchResources(m, &watchResourcesServiceWatchResourcesServer{stream})
}

type WatchResourcesService_WatchResourcesServer interface {
	Send(*WatchResourcesResponse) error
	grpc.ServerStream
}

type watchResourcesServiceWatchResourcesServer struct {
	grpc.ServerStream
}

func (x *watchResourcesServiceWatchResourcesServer) Send(m *WatchResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WatchResourcesService_ServiceDesc is the grpc.ServiceDesc for WatchResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzed.api.v1alpha1.WatchResourcesService",
	HandlerType: (*WatchResourcesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchResources",
			Handler:       _WatchResourcesService_WatchResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "authzed/api/v1alpha1/watchresources_service.proto",
}
