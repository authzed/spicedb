// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzed/api/v1alpha1/watchresources_service.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on WatchResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetResourceObjectType()) > 128 {
		return WatchResourcesRequestValidationError{
			field:  "ResourceObjectType",
			reason: "value length must be at most 128 bytes",
		}
	}

	if !_WatchResourcesRequest_ResourceObjectType_Pattern.MatchString(m.GetResourceObjectType()) {
		return WatchResourcesRequestValidationError{
			field:  "ResourceObjectType",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$\"",
		}
	}

	if len(m.GetPermission()) > 64 {
		return WatchResourcesRequestValidationError{
			field:  "Permission",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_WatchResourcesRequest_Permission_Pattern.MatchString(m.GetPermission()) {
		return WatchResourcesRequestValidationError{
			field:  "Permission",
			reason: "value does not match regex pattern \"^[a-z][a-z0-9_]{1,62}[a-z0-9]$\"",
		}
	}

	// no validation rules for SubjectObjectType

	// no validation rules for OptionalSubjectRelation

	if v, ok := interface{}(m.GetOptionalStartCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchResourcesRequestValidationError{
				field:  "OptionalStartCursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WatchResourcesRequestValidationError is the validation error returned by
// WatchResourcesRequest.Validate if the designated constraints aren't met.
type WatchResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchResourcesRequestValidationError) ErrorName() string {
	return "WatchResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchResourcesRequestValidationError{}

var _WatchResourcesRequest_ResourceObjectType_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$")

var _WatchResourcesRequest_Permission_Pattern = regexp.MustCompile("^[a-z][a-z0-9_]{1,62}[a-z0-9]$")

// Validate checks the field values on PermissionUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PermissionUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionUpdateValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionUpdateValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Relation

	// no validation rules for UpdatedPermission

	return nil
}

// PermissionUpdateValidationError is the validation error returned by
// PermissionUpdate.Validate if the designated constraints aren't met.
type PermissionUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionUpdateValidationError) ErrorName() string { return "PermissionUpdateValidationError" }

// Error satisfies the builtin error interface
func (e PermissionUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionUpdateValidationError{}

// Validate checks the field values on WatchResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchResourcesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUpdates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchResourcesResponseValidationError{
					field:  fmt.Sprintf("Updates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetChangesThrough()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchResourcesResponseValidationError{
				field:  "ChangesThrough",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WatchResourcesResponseValidationError is the validation error returned by
// WatchResourcesResponse.Validate if the designated constraints aren't met.
type WatchResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchResourcesResponseValidationError) ErrorName() string {
	return "WatchResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchResourcesResponseValidationError{}
