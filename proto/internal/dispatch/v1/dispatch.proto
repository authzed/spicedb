syntax = "proto3";
package dispatch.v1;

option go_package = "github.com/authzed/spicedb/pkg/proto/dispatch/v1";

import "validate/validate.proto";
import "core/v1/core.proto";
import "google/protobuf/struct.proto";

service DispatchService {
  rpc DispatchCheck(DispatchCheckRequest) returns (DispatchCheckResponse) {}
  rpc DispatchExpand(DispatchExpandRequest) returns (DispatchExpandResponse) {}
  rpc DispatchLookup(DispatchLookupRequest) returns (DispatchLookupResponse) {}
  rpc DispatchReachableResources(DispatchReachableResourcesRequest) returns (stream DispatchReachableResourcesResponse) {}
  rpc DispatchLookupSubjects(DispatchLookupSubjectsRequest) returns (stream DispatchLookupSubjectsResponse) {}
}

message DispatchCheckRequest {
  enum DebugSetting {
    NO_DEBUG = 0;
    ENABLE_DEBUGGING = 1;
  }

  enum ResultsSetting {
    REQUIRE_ALL_RESULTS = 0;
    ALLOW_SINGLE_RESULT = 1;
  }

  ResolverMeta metadata = 1 [ (validate.rules).message.required = true ];

  core.v1.RelationReference resource_relation = 2
      [ (validate.rules).message.required = true ];
  repeated string resource_ids = 3;

  core.v1.ObjectAndRelation subject = 4
      [ (validate.rules).message.required = true ];

  ResultsSetting results_setting = 5;

  DebugSetting debug = 6;
}

message DispatchCheckResponse {
  ResponseMeta metadata = 1;
  map<string, ResourceCheckResult> results_by_resource_id = 2;

  // Marshaled contains this message already marshaled.
  // This is used to avoid re-encoding to send over the wire.
  bytes marshaled = 3;
}

message ResourceCheckResult {
  enum Membership {
    UNKNOWN = 0;
    NOT_MEMBER = 1;
    MEMBER = 2;
    CAVEATED_MEMBER = 3;
  }

  Membership membership = 1;
  CaveatExpression expression = 2;
  repeated string missing_expr_fields = 3;
}

message CaveatExpression {  
  oneof operation_or_caveat {
    CaveatOperation operation = 1;
    core.v1.ContextualizedCaveat caveat = 2;
  }
}

message CaveatOperation {
  enum Operation {
    UNKNOWN = 0;
    OR = 1;
    AND = 2;
    NOT = 3;
  }

  Operation op = 1;
  repeated CaveatExpression children = 2;
}

message DispatchExpandRequest {
  enum ExpansionMode {
    SHALLOW = 0;
    RECURSIVE = 1;
  }

  ResolverMeta metadata = 1 [ (validate.rules).message.required = true ];

  core.v1.ObjectAndRelation resource_and_relation = 2
      [ (validate.rules).message.required = true ];
  ExpansionMode expansion_mode = 3;
}

message DispatchExpandResponse {
  ResponseMeta metadata = 1;
  core.v1.RelationTupleTreeNode tree_node = 2;

  // Marshaled contains this message already marshaled.
  // This is used to avoid re-encoding to send over the wire.
  bytes marshaled = 3;
}

message DispatchLookupRequest {
  ResolverMeta metadata = 1 [ (validate.rules).message.required = true ];

  core.v1.RelationReference object_relation = 2
      [ (validate.rules).message.required = true ];
  core.v1.ObjectAndRelation subject = 3
      [ (validate.rules).message.required = true ];
  uint32 limit = 4;
  repeated core.v1.RelationReference direct_stack = 5;
  repeated core.v1.RelationReference ttu_stack = 6;
}

message DispatchLookupResponse {
  ResponseMeta metadata = 1;

  repeated core.v1.ObjectAndRelation resolved_onrs = 2;
  string next_page_reference = 3;

  // Marshaled contains this message already marshaled.
  // This is used to avoid re-encoding to send over the wire.
  bytes marshaled = 4;
}

message DispatchReachableResourcesRequest {
  ResolverMeta metadata = 1 [ (validate.rules).message.required = true ];

  core.v1.RelationReference resource_relation = 2
      [ (validate.rules).message.required = true ];
  core.v1.RelationReference subject_relation = 3
      [ (validate.rules).message.required = true ];
  repeated string subject_ids = 4;
}

message ReachableResource {
  enum ResultStatus {
    /**
     * REQUIRES_CHECK indicates that the resource is reachable but a Check is required to
     * determine if the resource is actually found for the user.
     */
    REQUIRES_CHECK = 0;

    /**
     * HAS_PERMISSION indicates that the resource is both reachable and found for the permission
     * for the subject.
     */
    HAS_PERMISSION = 1;
  }

  repeated string resource_ids = 1;
  ResultStatus result_status = 2;
}

message DispatchReachableResourcesResponse {
  ReachableResource resource = 1;
  ResponseMeta metadata = 2;

  // Marshaled contains this message already marshaled.
  // This is used to avoid re-encoding to send over the wire.
  bytes marshaled = 3;
}

message DispatchLookupSubjectsRequest {
  ResolverMeta metadata = 1 [ (validate.rules).message.required = true ];

  core.v1.RelationReference resource_relation = 2
      [ (validate.rules).message.required = true ];
  repeated string resource_ids = 3;

  core.v1.RelationReference subject_relation = 4
      [ (validate.rules).message.required = true ];
}

message FoundSubject {
  string subject_id = 1;
  repeated string excluded_subject_ids = 2;
}

message DispatchLookupSubjectsResponse {
  repeated FoundSubject found_subjects = 1;
  ResponseMeta metadata = 2;

  // Marshaled contains this message already marshaled.
  // This is used to avoid re-encoding to send over the wire.
  bytes marshaled = 3;
}

message ResolverMeta {
  string at_revision = 1 [ (validate.rules).string = {
    pattern : "^[0-9]+(\\.[0-9]+)?$",
  } ];
  uint32 depth_remaining = 2 [ (validate.rules).uint32.gt = 0 ];
}

message ResponseMeta {
  uint32 dispatch_count = 1;
  uint32 depth_required = 2;
  uint32 cached_dispatch_count = 3;

  reserved 4,5;

  DebugInformation debug_info = 6;
}

message DebugInformation {
  CheckDebugTrace check = 1;
}

message CheckDebugTrace {
  enum RelationType {
    UNKNOWN = 0;
    RELATION = 1;
    PERMISSION = 2;
  }

  DispatchCheckRequest request = 1;
  RelationType resource_relation_type = 2;
  map<string, ResourceCheckResult> results = 3;
  bool is_cached_result = 4;
  repeated CheckDebugTrace sub_problems = 5;
}
