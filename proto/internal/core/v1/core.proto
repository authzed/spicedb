syntax = "proto3";
package core.v1;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/authzed/spicedb/pkg/proto/core/v1";

message RelationTuple {
  /** resource_and_relation is the resource for the tuple */
  ObjectAndRelation resource_and_relation = 1 [(validate.rules).message.required = true];

  /** subject is the subject for the tuple */
  ObjectAndRelation subject = 2 [(validate.rules).message.required = true];

  /** caveat is a reference to a the caveat that must be enforced over the tuple **/
  ContextualizedCaveat caveat = 3 [(validate.rules).message.required = false];

  /** integrity holds (optional) information about the integrity of the tuple */
  RelationshipIntegrity integrity = 4 [(validate.rules).message.required = false];
}

message RelationshipIntegrity {
  /** key_id is the key ID used to hash the tuple */
  string key_id = 1;

  /** hash is the hash of the tuple */
  bytes hash = 2;

  /** hashed_at is the timestamp when the tuple was hashed */
  google.protobuf.Timestamp hashed_at = 3;
}

/**
 * ContextualizedCaveat represents a reference to a caveat used to by caveated tuples.
 * The context are key-value pairs that will be injected at evaluation time.
 */
message ContextualizedCaveat {
  /** caveat_name is the name used in the schema for a stored caveat **/
  string caveat_name = 1 [(validate.rules).string = {
    pattern: "^(([a-zA-Z0-9_][a-zA-Z0-9/_|-]{0,127})|\\*)$",
    max_bytes: 128,
  }];

  /** context are arguments used as input during caveat evaluation with a predefined value **/
  google.protobuf.Struct context = 2 [(validate.rules).message.required = false];
}

message CaveatDefinition {
  /** name represents the globally-unique identifier of the caveat **/
  string name = 1 [(validate.rules).string = {
    pattern: "^(([a-zA-Z0-9_][a-zA-Z0-9/_|-]{0,127})|\\*)$",
    max_bytes: 128,
  }];

  /** serialized_expression is the byte representation of a caveat's logic */
  bytes serialized_expression = 2 [(validate.rules).bytes = {
    min_len: 0,
    max_len: 4096
  }];

  /** parameters_and_types is a map from parameter name to its type */
  map<string, CaveatTypeReference> parameter_types = 3 [(validate.rules).map = {
    min_pairs: 1,
    max_pairs: 20
  }];

  /** metadata contains compiler metadata from schemas compiled into caveats */
  Metadata metadata = 4;

  /** source_position contains the position of the caveat in the source schema, if any */
  SourcePosition source_position = 5;
}

message CaveatTypeReference {
  string type_name = 1;
  repeated CaveatTypeReference child_types = 2 [(validate.rules).repeated = {
    min_items: 0,
    max_items: 1
  }];
}

message ObjectAndRelation {
  /** namespace is the full namespace path for the referenced object */
  string namespace = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 128,
  }];

  /** object_id is the unique ID for the object within the namespace */
  string object_id = 2 [(validate.rules).string = {
    pattern: "^(([a-zA-Z0-9/_|\\-=+]{1,})|\\*)$",
    max_bytes: 1024,
  }];

  /** relation is the name of the referenced relation or permission under the namespace */
  string relation = 3 [(validate.rules).string = {
    pattern: "^(\\.\\.\\.|[a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];
}

message RelationReference {
  /** namespace is the full namespace path */
  string namespace = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 128,
  }];

  /** relation is the name of the referenced relation or permission under the namespace */
  string relation = 3 [(validate.rules).string = {
    pattern: "^(\\.\\.\\.|[a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];
}

message Zookie {
  string token = 1 [(validate.rules).string = {min_bytes: 1}];
}

message RelationTupleUpdate {
  enum Operation {
    UNKNOWN = 0;
    CREATE = 1;
    TOUCH = 2;
    DELETE = 3;
  }
  Operation operation = 1 [(validate.rules).enum.defined_only = true];
  RelationTuple tuple = 2 [(validate.rules).message.required = true];
}

message RelationTupleTreeNode {
  oneof node_type {
    SetOperationUserset intermediate_node = 1;
    DirectSubjects leaf_node = 2;
  }
  ObjectAndRelation expanded = 3;
  CaveatExpression caveat_expression = 4;
}

message SetOperationUserset {
  enum Operation {
    INVALID = 0;
    UNION = 1;
    INTERSECTION = 2;
    EXCLUSION = 3;
  }

  Operation operation = 1;
  repeated RelationTupleTreeNode child_nodes = 2;
}

message DirectSubject {
  ObjectAndRelation subject = 1;
  CaveatExpression caveat_expression = 2;
}

message DirectSubjects {
  repeated DirectSubject subjects = 1;
}

/**
 * Metadata is compiler metadata added to namespace definitions, such as doc comments and
 * relation kinds.
 */
message Metadata {
  repeated google.protobuf.Any metadata_message = 1 [
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.items.message.required = true,

    // NOTE: This is generating code without the associated map, which we added in manually
    // until it is fixed upstream.
    // See: https://github.com/envoyproxy/protoc-gen-validate/issues/481
    (validate.rules).repeated.items.any = {
      in: [
        "type.googleapis.com/impl.v1.DocComment",
        "type.googleapis.com/impl.v1.RelationMetadata"
      ],
      required: true,
    }
  ];
}

/**
 * NamespaceDefinition represents a single definition of an object type
 */
message NamespaceDefinition {
  /** name is the unique for the namespace, including prefixes (which are optional) */
  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 128,
  }];

  /** relation contains the relations and permissions defined in the namespace */
  repeated Relation relation = 2;

  /** metadata contains compiler metadata from schemas compiled into namespaces */
  Metadata metadata = 3;

  /** source_position contains the position of the namespace in the source schema, if any */
  SourcePosition source_position = 4;
}

/**
 * Relation represents the definition of a relation or permission under a namespace.
 */
message Relation {
  /** name is the full name for the relation or permission */
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];

  /** userset_rewrite, if specified, is the rewrite for computing the value of the permission. */
  UsersetRewrite userset_rewrite = 2;

  /**
   * type_information, if specified, is the list of allowed object types that can appear in this
   * relation
   */
  TypeInformation type_information = 3;

  /** metadata contains compiler metadata from schemas compiled into namespaces */
  Metadata metadata = 4;

  /** source_position contains the position of the relation in the source schema, if any */
  SourcePosition source_position = 5;

  string aliasing_relation = 6;
  string canonical_cache_key = 7;
}

/**
 * ReachabilityGraph is a serialized form of a reachability graph, representing how a relation can
 * be reached from one or more subject types.
 *
 * It defines a "reverse" data flow graph, starting at a subject type, and providing all the
 * entrypoints where that subject type can be found leading to the decorated relation.
 *
 * For example, given the schema:
 * ```
 *   definition user {}
 *
 *   definition organization {
 *     relation admin: user
 *   }
 *
 *   definition resource {
 *     relation org: organization
 *     relation viewer: user
 *     relation owner: user
 *     permission view = viewer + owner + org->admin
 *   }
 * ```
 *
 * The reachability graph for `viewer` and the other relations will have entrypoints for each
 * subject type found for those relations.
 *
 * The full reachability graph for the `view` relation will have three entrypoints, representing:
 *   1) resource#viewer (computed_userset)
 *   2) resource#owner  (computed_userset)
 *   3) organization#admin (tupleset_to_userset)
 */
message ReachabilityGraph {
  /**
   * entrypoints_by_subject_type provides all entrypoints by subject *type*, representing wildcards.
   * The keys of the map are the full path(s) for the namespace(s) referenced by reachable wildcards
   */
  map<string, ReachabilityEntrypoints> entrypoints_by_subject_type = 1;

  /**
   * entrypoints_by_subject_relation provides all entrypoints by subject type+relation.
   * The keys of the map are of the form `namespace_path#relation_name`
   */
  map<string, ReachabilityEntrypoints> entrypoints_by_subject_relation = 2;
}

/**
 * ReachabilityEntrypoints represents all the entrypoints for a specific subject type or subject
 * relation into the reachability graph for a particular target relation.
 */
message ReachabilityEntrypoints {
  /**
   * entrypoints are the entrypoints found.
   */
  repeated ReachabilityEntrypoint entrypoints = 1;

  /**
   * subject_type, if specified, is the type of subjects to which the entrypoint(s) apply. A
   * subject type is only set for wildcards.
   */
  string subject_type = 2;

  /**
   * subject_relation, if specified, is the type and relation of subjects to which the
   * entrypoint(s) apply.
   */
  RelationReference subject_relation = 3;
}

/**
 * ReachabilityEntrypoint represents a single entrypoint for a specific subject type or subject
 * relation into the reachability graph for a particular target relation.
 */
message ReachabilityEntrypoint {
  enum ReachabilityEntrypointKind {
    /**
     * RELATION_ENTRYPOINT indicates an entrypoint where the subject object can be directly
     * found for a relationship.
     */
    RELATION_ENTRYPOINT = 0;

    /**
     * COMPUTED_USERSET_ENTRYPOINT indicates an entrypoint where the subject's relation is
     * "rewritten" via a `computed_userset` to the target permission's operation node.
     */
    COMPUTED_USERSET_ENTRYPOINT = 1;

    /**
     * TUPLESET_TO_USERSET_ENTRYPOINT indicates an entrypoint where the subject's relation is
     * walked via a `tupleset_to_userset` in the target permission's operation node.
     */
    TUPLESET_TO_USERSET_ENTRYPOINT = 2;
  }

  enum EntrypointResultStatus {
    /**
     * REACHABLE_CONDITIONAL_RESULT indicates that the entrypoint is under one or more intersections
     * or exclusion operations, indicating that any reachable object *may* be a result, conditional
     * on the parent non-union operation(s).
     */
    REACHABLE_CONDITIONAL_RESULT = 0;

    /**
     * DIRECT_OPERATION_RESULT indicates that the entrypoint exists solely under zero or more
     * union operations, making any reachable object also a *result* of the relation or permission.
     */
    DIRECT_OPERATION_RESULT = 1;
  }

  /**
   * kind is the kind of the entrypoint.
   */
  ReachabilityEntrypointKind kind = 1;

  /**
   * target_relation is the relation on which the entrypoint exists.
   */
  RelationReference target_relation = 2;

  /**
   * result_status contains the status of objects found for this entrypoint as direct results for
   * the parent relation/permission.
   */
  EntrypointResultStatus result_status = 4;

  reserved 3;

  /**
   * tupleset_relation is the name of the tupleset relation on the TupleToUserset this entrypoint
   * represents, if applicable.
   */
  string tupleset_relation = 5;

  /**
    * computed_userset_relation is the name of the computed userset relation on the ComputedUserset
    * this entrypoint represents, if applicable.
    */  
  string computed_userset_relation = 6;
}

/**
 * TypeInformation defines the allowed types for a relation.
 */
message TypeInformation {
  /**
   * allowed_direct_relations are those relation types allowed to be placed into a relation,
   * e.g. the types of subjects allowed when a relationship is written to the relation
   */
  repeated AllowedRelation allowed_direct_relations = 1;
}

/**
 * AllowedRelation is an allowed type of a relation when used as a subject.
 */
message AllowedRelation {
  message PublicWildcard {}

  /** namespace is the full namespace path of the allowed object type */
  string namespace = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 128,
  }];

  /**
   * relation_or_wildcard indicates the relation for the objects, or a wildcard.
   */
  oneof relation_or_wildcard {
    string relation = 3 [(validate.rules).string = {
      pattern: "^(\\.\\.\\.|[a-z][a-z0-9_]{1,62}[a-z0-9])$",
      max_bytes: 64,
    }];
    PublicWildcard public_wildcard = 4;
  }

  /** source_position contains the position of the type in the source schema, if any */
  SourcePosition source_position = 5;

  /**
   * required_caveat defines the required caveat on this relation.
   */
  AllowedCaveat required_caveat = 6;
}

/**
 * AllowedCaveat is an allowed caveat of a relation.
 */
message AllowedCaveat {
  /**
   * caveat_name is the name of the allowed caveat.
   */
  string caveat_name = 1;
}

message UsersetRewrite {
  oneof rewrite_operation {
    option (validate.required) = true;

    SetOperation union = 1 [(validate.rules).message.required = true];
    SetOperation intersection = 2 [(validate.rules).message.required = true];
    SetOperation exclusion = 3 [(validate.rules).message.required = true];
  }

  SourcePosition source_position = 4;
}

message SetOperation {
  message Child {
    message This {}
    message Nil {}

    oneof child_type {
      option (validate.required) = true;

      This _this = 1;
      ComputedUserset computed_userset = 2 [(validate.rules).message.required = true];
      TupleToUserset tuple_to_userset = 3 [(validate.rules).message.required = true];
      UsersetRewrite userset_rewrite = 4 [(validate.rules).message.required = true];
      FunctionedTupleToUserset functioned_tuple_to_userset = 8 [(validate.rules).message.required = true];
      Nil _nil = 6;
    }

    SourcePosition source_position = 5;

    /**
     * operation_path (if specified) is the *unique* ID for the set operation in the permission
     * definition. It is a heirarchy representing the position of the operation under its parent
     * operation. For example, the operation path of an operation which is the third child of the
     * fourth top-level operation, will be `3,2`.
     */
    repeated uint32 operation_path = 7;
  }

  repeated Child child = 1 [
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.items.message.required = true
  ];
}

message TupleToUserset {
  message Tupleset {
    string relation = 1 [(validate.rules).string = {
      pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
      max_bytes: 64,
    }];
  }

  Tupleset tupleset = 1 [(validate.rules).message.required = true];
  ComputedUserset computed_userset = 2 [(validate.rules).message.required = true];
  SourcePosition source_position = 3;
}

message FunctionedTupleToUserset {
  enum Function {
    FUNCTION_UNSPECIFIED = 0;
    FUNCTION_ANY = 1;
    FUNCTION_ALL = 2;
  }

  message Tupleset {
    string relation = 1 [(validate.rules).string = {
      pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
      max_bytes: 64,
    }];
  }

  Function function = 1 [ (validate.rules).enum = {defined_only: true, not_in: [0]} ];
  Tupleset tupleset = 2 [(validate.rules).message.required = true];
  ComputedUserset computed_userset = 3 [(validate.rules).message.required = true];
  SourcePosition source_position = 4;
}

message ComputedUserset {
  enum Object {
    TUPLE_OBJECT = 0;
    TUPLE_USERSET_OBJECT = 1;
  }

  Object object = 1 [(validate.rules).enum.defined_only = true];
  string relation = 2 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];
  SourcePosition source_position = 3;
}

message SourcePosition {
  uint64 zero_indexed_line_number = 1;
  uint64 zero_indexed_column_position = 2;
}

message CaveatExpression {
  oneof operation_or_caveat {
    CaveatOperation operation = 1;
    core.v1.ContextualizedCaveat caveat = 2;
  }
}

message CaveatOperation {
  enum Operation {
    UNKNOWN = 0;
    OR = 1;
    AND = 2;
    NOT = 3;
  }

  Operation op = 1;
  repeated CaveatExpression children = 2;
}

message RelationshipFilter {
  // resource_type is the *optional* resource type of the relationship.
  // NOTE: It is not prefixed with "optional_" for legacy compatibility.
  string resource_type = 1 [ (validate.rules).string = {
    pattern : "^(([a-z][a-z0-9_]{1,61}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9])?$",
    max_bytes : 128,
  } ];

  // optional_resource_id is the *optional* resource ID of the relationship.
  // If specified, optional_resource_id_prefix cannot be specified.
  string optional_resource_id = 2 [ (validate.rules).string = {
    pattern : "^([a-zA-Z0-9/_|\\-=+]{1,})?$",
    max_bytes : 1024,
  } ];

  // optional_resource_id_prefix is the *optional* prefix for the resource ID of the relationship.
  // If specified, optional_resource_id cannot be specified.
  string optional_resource_id_prefix = 5 [ (validate.rules).string = {
    pattern : "^([a-zA-Z0-9/_|\\-=+]{1,})?$",
    max_bytes : 1024,
  } ];


  // relation is the *optional* relation of the relationship.
  string optional_relation = 3 [ (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])?$",
    max_bytes : 64,
  } ];

  // optional_subject_filter is the optional filter for the subjects of the relationships.
  SubjectFilter optional_subject_filter = 4;
}

// SubjectFilter specifies a filter on the subject of a relationship.
//
// subject_type is required and all other fields are optional, and will not
// impose any additional requirements if left unspecified.
message SubjectFilter {
  message RelationFilter {
    string relation = 1 [ (validate.rules).string = {
      pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])?$",
      max_bytes : 64,
    } ];
  }

  string subject_type = 1 [ (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)*[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes : 128,
  } ];

  string optional_subject_id = 2 [ (validate.rules).string = {
    pattern : "^(([a-zA-Z0-9/_|\\-=+]{1,})|\\*)?$",
    max_bytes : 1024,
  } ];

  RelationFilter optional_relation = 3;
}

